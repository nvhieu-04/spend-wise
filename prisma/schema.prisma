generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid()) @db.Char(36)
  name          String
  email         String     @unique
  createdAt     DateTime   @default(now())
  passwordHash  String?
  image         String?
  emailVerified String?
  accounts      Account[]
  bankCards     BankCard[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(uuid()) @db.Char(36)
  userId            String  @db.Char(36)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(uuid()) @db.Char(36)
  sessionToken String   @unique
  userId       String   @db.Char(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Session_userId_fkey")
}

model BankCard {
  id               String           @id @default(uuid()) @db.Char(36)
  userId           String           @db.Char(36)
  cardName         String
  cardNumberLast4  String
  bankName         String
  cardType         String
  cardColor        String?          // Color in hex format (e.g. #FF0000)
  creditLimit      Float?
  statementClosingDate Int?             // Day of month (1-31)
  paymentDueDate       Int?             // Day of month (1-31)
  createdAt        DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id])
  cashbackPolicies CashbackPolicy[] @relation("BankCardToCashbackPolicy")
  transactions     Transaction[]    @relation("BankCardToTransaction")
  categories       Category[]       @relation("BankCardToCategory")

  @@index([userId], map: "BankCard_userId_fkey")
}

model Transaction {
  id              String    @id @default(uuid()) @db.Char(36)
  cardId          String    @db.Char(36)
  amount          Float
  currency        String
  transactionDate DateTime
  merchantName    String?
  categoryId      String?   @db.Char(36)
  cashbackEarned  Float?
  createdAt       DateTime  @default(now())
  isExpense       Boolean   @default(true)
  card            BankCard  @relation("BankCardToTransaction", fields: [cardId], references: [id], onDelete: Cascade)
  category        Category? @relation(fields: [categoryId], references: [id])

  @@index([cardId], map: "Transaction_cardId_fkey")
  @@index([categoryId], map: "Transaction_categoryId_fkey")
}

model CashbackPolicy {
  id                 String   @id @default(uuid()) @db.Char(36)
  cardId             String   @db.Char(36)
  categoryId         String   @db.Char(36)
  cashbackPercentage Float
  maxCashback        Float?
  createdAt          DateTime @default(now())
  card               BankCard @relation("BankCardToCashbackPolicy", fields: [cardId], references: [id], onDelete: Cascade)
  category           Category @relation(fields: [categoryId], references: [id])

  @@index([cardId], map: "CashbackPolicy_cardId_fkey")
  @@index([categoryId], map: "CashbackPolicy_categoryId_fkey")
}

model Category {
  id               String           @id @default(uuid()) @db.Char(36)
  name             String
  description      String?
  createdAt        DateTime         @default(now())
  cardId           String           @db.Char(36)
  card             BankCard         @relation("BankCardToCategory", fields: [cardId], references: [id], onDelete: Cascade)
  cashbackPolicies CashbackPolicy[]
  transactions     Transaction[]

  @@unique([name, cardId])
  @@index([cardId], map: "Category_cardId_fkey")
}
